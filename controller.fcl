FUNCTION_BLOCK

VAR_INPUT
border_distance : REAL;
collision_distance : REAL;
collision_angle : REAL;
velocity : REAL;
direct_angle : REAL;
END_VAR

VAR_OUTPUT
direct_change : REAL;
velocity_change : REAL;
END_VAR

FUZZIFY border_distance
TERM near := (0, 1) (5, 1) (10, 0);
TERM far := (5, 0) (15, 1) (30, 1) (40, 0);
TERM far_away := (30, 0) (40, 1) (50, 1) (60, 0);
TERM too_far := (-11, 0) (-10, 1) (-1, 1) (0, 0);
END_FUZZIFY

FUZZIFY collision_distance
TERM near := (0, 1) (5, 1) (10, 0);
TERM far := (5, 0) (15, 1) (30, 1) (40, 0);
TERM far_away := (30, 0) (40, 1) (50, 1) (60, 0);
END_FUZZIFY

FUZZIFY collision_angle
TERM central := (0, 1) (30, 1) (91, 0);
TERM NO_COLLISION := (-11, 0) (-10, 1) (-1, 1) (0, 0);
END_FUZZIFY

FUZZIFY velocity
TERM slow :=  (0, 1) (1, 1) (2, 0);
TERM averagely := (1, 0) (3, 1) (4, 1) (5, 0);
TERM fast := (4, 0) (6, 1) (7, 1) (8, 0);
TERM very_fast := (7, 0) (9, 1) (10, 1);
END_FUZZIFY

FUZZIFY direct_angle
TERM central := (-5, 0) (0, 1) (5, 0);
TERM left := (-45, 0) (-30, 1) (-15, 1) (0, 0);
TERM v_left := (-90, 1) (-60, 1) (-30, 0);
TERM right := (0, 0) (15, 1) (30, 1) (45, 0);
TERM v_right := (30, 0) (60, 1) (90, 1);
END_FUZZIFY

DEFUZZIFY direct_change
TERM NO_CHANGE := (-0.02, 0) (-0.01, 1) (0.01, 1) (0.01, 0);
TERM slightly_left := (-3, 0) (-2, 1) (-1, 1) (0, 0);
TERM rapidly_left := (-7, 0) (-5, 1) (-3, 1) (-1, 0);
TERM slightly_right := (0, 0) (1, 1) (2, 1) (3, 0);
TERM rapidly_right := (1, 0) (3, 1) (5, 1) (7, 0);
METHOD : COG;
DEFAULT := 0;
END_DEFUZZIFY


DEFUZZIFY velocity_change
TERM NO_CHANGE := (-0.02, 0) (-0.01, 1) (0.01, 1) (0.02, 0);
TERM slightly_faster := (0, 0) (0.5, 1) (1, 1) (1.5, 0);
TERM rapidly_faster := (1, 0) (1.5, 1) (2, 1);
TERM slightly_slower := (-1.5, 0) (-1, 1) (-0.5, 1) (0, 0);
TERM rapidly_slower := (-2, 1) (-1.5, 1) (-1, 0);
METHOD : COG;
DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK first
AND: MIN;
ACT: MIN;

RULE 0: IF collision_angle is NO_COLLISION AND velocity is very_fast AND border_distance is near THEN velocity_change is rapidly_slower;
RULE 1: IF collision_angle is NO_COLLISION AND velocity is fast AND border_distance is far THEN velocity_change is slightly_slower;

RULE 2: IF collision_angle is NO_COLLISION AND direct_angle is left THEN direct_change is slightly_right;
RULE 3: IF collision_angle is NO_COLLISION AND direct_angle is v_left THEN direct_change is rapidly_right;
RULE 4: IF collision_angle is NO_COLLISION AND direct_angle is right THEN direct_change is slightly_left;
RULE 5: IF collision_angle is NO_COLLISION AND direct_angle is v_right THEN direct_change is rapidly_left;

RULE 6: IF collision_angle is NO_COLLISION AND direct_angle is central AND velocity is slow THEN velocity_change is rapidly_faster;
RULE 7: IF collision_angle is NO_COLLISION AND direct_angle is central AND velocity is fast THEN velocity_change is slightly_faster;


RULE 8: IF collision_angle is central AND velocity is fast THEN velocity_change is slightly_slower;
RULE 9: IF collision_angle is central AND velocity is very_fast THEN velocity_change is rapidly_slower;

RULE 10: IF collision_angle is central AND direct_angle is left THEN direct_change is rapidly_right;
RULE 11: IF collision_angle is central AND direct_angle is right THEN direct_change is rapidly_left;
RULE 12: IF collision_angle is central AND direct_angle is central THEN direct_change is slightly_right;

RULE 13: IF collision_angle is NO_COLLISION AND direct_angle is central AND velocity is slow THEN velocity_change is slightly_faster;
RULE 14: IF collision_angle is NO_COLLISION OR collision_angle is central THEN velocity_change is slightly_faster;
END_RULEBLOCK


END_FUNCTION_BLOCK